"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
var hasNewVersion_1 = require("./hasNewVersion");
var cache_1 = require("./cache");
var getDistVersion_1 = require("./getDistVersion");
jest.mock('./getDistVersion', function () { return jest.fn().mockReturnValue('1.0.0'); });
jest.mock('./cache', function () { return ({
    getLastUpdate: jest.fn().mockReturnValue(undefined),
    createConfigDir: jest.fn(),
    saveLastUpdate: jest.fn()
}); });
var pkg = { name: 'test', version: '1.0.0' };
afterEach(function () { return jest.clearAllMocks(); });
var defaultArgs = {
    pkg: pkg,
    shouldNotifyInNpmScript: true,
    alwaysRun: true
};
test('it should not trigger update for same version', function () { return __awaiter(void 0, void 0, void 0, function () {
    var newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, hasNewVersion_1["default"](defaultArgs)];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe(false);
                return [2 /*return*/];
        }
    });
}); });
test('it should trigger update for patch version bump', function () { return __awaiter(void 0, void 0, void 0, function () {
    var newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                getDistVersion_1["default"].mockReturnValue('1.0.1');
                return [4 /*yield*/, hasNewVersion_1["default"](defaultArgs)];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe('1.0.1');
                return [2 /*return*/];
        }
    });
}); });
test('it should trigger update for minor version bump', function () { return __awaiter(void 0, void 0, void 0, function () {
    var newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                getDistVersion_1["default"].mockReturnValue('1.1.0');
                return [4 /*yield*/, hasNewVersion_1["default"](defaultArgs)];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe('1.1.0');
                return [2 /*return*/];
        }
    });
}); });
test('it should trigger update for major version bump', function () { return __awaiter(void 0, void 0, void 0, function () {
    var newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                getDistVersion_1["default"].mockReturnValue('2.0.0');
                return [4 /*yield*/, hasNewVersion_1["default"](defaultArgs)];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe('2.0.0');
                return [2 /*return*/];
        }
    });
}); });
test('it should not trigger update if version is lower', function () { return __awaiter(void 0, void 0, void 0, function () {
    var newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                getDistVersion_1["default"].mockReturnValue('0.0.9');
                return [4 /*yield*/, hasNewVersion_1["default"](defaultArgs)];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe(false);
                return [2 /*return*/];
        }
    });
}); });
it('should trigger update check if last update older than config', function () { return __awaiter(void 0, void 0, void 0, function () {
    var TWO_WEEKS, newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                TWO_WEEKS = new Date().getTime() - 1000 * 60 * 60 * 24 * 14;
                cache_1.getLastUpdate.mockReturnValue(TWO_WEEKS);
                return [4 /*yield*/, hasNewVersion_1["default"]({
                        pkg: pkg,
                        shouldNotifyInNpmScript: true
                    })];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe(false);
                expect(getDistVersion_1["default"]).toHaveBeenCalled();
                return [2 /*return*/];
        }
    });
}); });
it('should not trigger update check if last update is too recent', function () { return __awaiter(void 0, void 0, void 0, function () {
    var TWELVE_HOURS, newVersion;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                TWELVE_HOURS = new Date().getTime() - 1000 * 60 * 60 * 12;
                cache_1.getLastUpdate.mockReturnValue(TWELVE_HOURS);
                return [4 /*yield*/, hasNewVersion_1["default"]({
                        pkg: pkg,
                        shouldNotifyInNpmScript: true
                    })];
            case 1:
                newVersion = _a.sent();
                expect(newVersion).toBe(false);
                expect(getDistVersion_1["default"]).not.toHaveBeenCalled();
                return [2 /*return*/];
        }
    });
}); });
